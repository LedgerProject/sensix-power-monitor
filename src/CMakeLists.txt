string (REPLACE " " "_" BINARY_NAME ${PROJECT_NAME})
string (TOLOWER ${BINARY_NAME} BINARY_NAME)

add_library (${BINARY_NAME})

target_sources(
    ${BINARY_NAME} PRIVATE
    afe_reader.cc           include/afe_reader.hh
                            include/common.hh
                            include/math.hh
    readings.cc             include/readings.hh
    sample_buffer.cc        include/sample_buffer.hh
)

if (NOT POWER_MONITOR_ENABLE_TESTING)
    target_sources(
        ${BINARY_NAME} PRIVATE
        main.cc
    )
endif ()

target_include_directories (
    ${BINARY_NAME} PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
)

target_compile_definitions (
    ${BINARY_NAME}
    PRIVATE
        -D$<UPPER_CASE:${BINARY_NAME}>_BIN
        -DSOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
        -DBINARY_DIR="${CMAKE_CURRENT_BINARY_DIR}"
    PUBLIC
        -DPOWER_MONITOR_PLATFORM_$<UPPER_CASE:${POWER_MONITOR_ARCH}>
)

target_link_libraries (
    ${BINARY_NAME} PRIVATE
    elsen_project_options
    elsen_project_warnings
)

target_link_libraries (
    ${BINARY_NAME} PUBLIC
    c-ringbuf::c-ringbuf
    magic_enum::magic_enum
    minfft::minfft
    elsen::elsen
)

elsen_embed_resources (
    TARGET ${BINARY_NAME}
    RESOURCES
        # Let's Encrypt Root Certificate
        "${CMAKE_CURRENT_LIST_DIR}/../data/ISRG_Root_X1.pem" TEXT
)

if (POWER_MONITOR_ARCH STREQUAL "xtensa")
    target_compile_options (${BINARY_NAME} PRIVATE "${IDF_COMPILE_OPTIONS}")
    target_compile_options (${BINARY_NAME} PRIVATE "${IDF_CXX_COMPILE_OPTIONS}")

    # All of these are to work around warnings generated by the IDF SDK
    # Since we are aggressive with our warning level and treat all warnings
    # as errors, any file included from the IDF SDK causes a compilation failure.

    # So we just set the proper include directories from every direct dependency
    # with the SYSTEM flag set.
    get_target_property(ESP_NVS_FLASH_INCLUDES idf::nvs_flash INCLUDE_DIRECTORIES)
    list (POP_FRONT ESP_NVS_FLASH_INCLUDES)

    get_target_property(ESP_DRIVER_INCLUDES idf::driver INCLUDE_DIRECTORIES)
    list (POP_FRONT ESP_DRIVER_INCLUDES)

    get_target_property(ESP_DRIVER_INCLUDES idf::pthread INCLUDE_DIRECTORIES)
    list (POP_FRONT ESP_PTHREAD_INCLUDES)

    get_target_property(ESP_HTTP_CLIENT_INCLUDES idf::esp_http_client INCLUDE_DIRECTORIES)
    list (POP_FRONT ESP_HTTP_CLENT_INCLUDES)

    target_include_directories (
        ${BINARY_NAME} SYSTEM PRIVATE
        ${ESP_NVS_FLASH_INCLUDES}
        ${ESP_DRIVER_INCLUDES}
        ${ESP_PTHREAD_INCLUDES}
        ${ESP_HTTP_CLIENT_INCLUDES}
    )

    target_link_libraries (
        ${BINARY_NAME} PRIVATE
        idf::nvs_flash
        idf::driver
        idf::pthread
        idf::esp_http_client
    )

    target_link_libraries (
        ${BINARY_NAME}.elf
        elsen_project_options
    )
    
    if (NOT POWER_MONITOR_ENABLE_TESTING)
        target_link_libraries (
            ${BINARY_NAME}.elf
            ${BINARY_NAME}
        )
    endif ()
endif ()
